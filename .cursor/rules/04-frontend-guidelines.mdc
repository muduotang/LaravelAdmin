---
description: Vue 3 + TypeScript + Element Plus 前端开发指南
globs: ["src/**/*.vue", "src/**/*.ts", "src/**/*.js"]
alwaysApply: true
---

# Vue 3 + TypeScript + Element Plus 前端开发指南

## 技术栈

- **框架**: Vue 3 (Composition API)
- **语言**: TypeScript
- **UI库**: Element Plus
- **状态管理**: Pinia
- **路由**: Vue Router 4
- **HTTP客户端**: Axios
- **构建工具**: Vite
- **样式**: SCSS

## 项目结构

```
src/
├── api/                    # API接口定义
│   ├── auth.ts            # 认证相关接口
│   ├── admin.ts           # 管理员管理接口
│   ├── role.ts            # 角色管理接口
│   └── request.ts         # HTTP请求配置
├── components/            # 公共组件
│   ├── Pagination/        # 分页组件
│   └── SvgIcon/          # SVG图标组件
├── icons/                 # 图标资源
│   ├── svg/              # SVG图标文件
│   └── index.ts          # 图标注册
├── layout/               # 布局组件
│   ├── components/       # 布局子组件
│   │   ├── Navbar.vue    # 顶部导航
│   │   ├── Sidebar/      # 侧边栏
│   │   └── TagsView/     # 标签页导航
│   └── index.vue         # 主布局
├── router/               # 路由配置
│   ├── index.ts          # 路由主文件
│   └── modules/          # 路由模块
├── stores/               # Pinia状态管理
│   ├── user.ts           # 用户状态
│   ├── app.ts            # 应用状态
│   └── permission.ts     # 权限状态
├── styles/               # 样式文件
│   ├── index.scss        # 主样式
│   ├── variables.module.scss # 样式变量
│   ├── sidebar.scss      # 侧边栏样式
│   ├── element-ui.scss   # Element Plus样式覆盖
│   └── transition.scss   # 过渡动画
├── utils/                # 工具函数
│   ├── auth.ts           # 认证工具
│   ├── validate.ts       # 验证工具
│   └── scroll-to.ts      # 滚动工具
├── views/                # 页面组件
│   ├── login/            # 登录页
│   ├── dashboard/        # 仪表盘
│   ├── system/           # 系统管理
│   │   ├── admin/        # 管理员管理
│   │   └── role/         # 角色管理
│   └── error-page/       # 错误页面
├── App.vue               # 根组件
├── main.ts               # 入口文件
└── permission.ts         # 权限控制
```

## 开发规范

### 1. 组件开发

#### 1.1 组件命名
- 使用 PascalCase 命名组件文件
- 组件名应该具有描述性，避免缩写
- 页面组件放在 `views/` 目录下
- 公共组件放在 `components/` 目录下

#### 1.2 组件结构
```vue
<template>
  <!-- 模板内容 -->
</template>

<script setup lang="ts">
// 导入
import { ref, reactive, computed, onMounted } from 'vue'
import type { FormInstance } from 'element-plus'

// 类型定义
interface FormData {
  username: string
  password: string
}

// 响应式数据
const formRef = ref<FormInstance>()
const formData = reactive<FormData>({
  username: '',
  password: ''
})

// 计算属性
const isFormValid = computed(() => {
  return formData.username && formData.password
})

// 方法
const handleSubmit = async () => {
  // 处理逻辑
}

// 生命周期
onMounted(() => {
  // 初始化逻辑
})
</script>

<style lang="scss" scoped>
// 样式
</style>
```

### 2. TypeScript 规范

#### 2.1 类型定义
- 为所有 API 响应定义接口类型
- 为组件 props 和 emits 定义类型
- 使用 `interface` 定义对象类型
- 使用 `type` 定义联合类型或别名

```typescript
// API 响应类型
interface ApiResponse<T = any> {
  code: number
  message: string
  data: T
}

// 用户信息类型
interface UserInfo {
  id: number
  username: string
  nickname: string
  email?: string
  roles: string[]
}

// 表单数据类型
type LoginForm = {
  username: string
  password: string
  remember: boolean
}
```

#### 2.2 组件类型
```typescript
// Props 类型定义
interface Props {
  title: string
  visible: boolean
  data?: UserInfo
}

// Emits 类型定义
interface Emits {
  (e: 'update:visible', value: boolean): void
  (e: 'confirm', data: UserInfo): void
}

// 使用
const props = defineProps<Props>()
const emit = defineEmits<Emits>()
```

### 3. 状态管理 (Pinia)

#### 3.1 Store 结构
```typescript
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import type { UserInfo } from '@/types'

export const useUserStore = defineStore('user', () => {
  // 状态
  const userInfo = ref<UserInfo | null>(null)
  const token = ref<string>('')
  
  // 计算属性
  const isLoggedIn = computed(() => !!token.value)
  const roles = computed(() => userInfo.value?.roles || [])
  
  // 方法
  const login = async (credentials: LoginForm) => {
    // 登录逻辑
  }
  
  const logout = () => {
    userInfo.value = null
    token.value = ''
  }
  
  return {
    userInfo,
    token,
    isLoggedIn,
    roles,
    login,
    logout
  }
})
```

### 4. API 接口

#### 4.1 接口定义
```typescript
import request from '@/utils/request'
import type { ApiResponse, UserInfo, LoginForm } from '@/types'

// 登录接口
export const login = (data: LoginForm): Promise<ApiResponse<{ token: string }>> => {
  return request({
    url: '/auth/login',
    method: 'post',
    data
  })
}

// 获取用户信息
export const getUserInfo = (): Promise<ApiResponse<UserInfo>> => {
  return request({
    url: '/auth/user',
    method: 'get'
  })
}
```

#### 4.2 请求配置
```typescript
import axios from 'axios'
import type { AxiosRequestConfig, AxiosResponse } from 'axios'
import { ElMessage } from 'element-plus'
import { useUserStore } from '@/stores/user'

const service = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL,
  timeout: 10000
})

// 请求拦截器
service.interceptors.request.use(
  (config: AxiosRequestConfig) => {
    const userStore = useUserStore()
    if (userStore.token) {
      config.headers = {
        ...config.headers,
        Authorization: `Bearer ${userStore.token}`
      }
    }
    return config
  },
  (error) => {
    return Promise.reject(error)
  }
)

// 响应拦截器
service.interceptors.response.use(
  (response: AxiosResponse) => {
    const { code, message, data } = response.data
    if (code === 200) {
      return data
    } else {
      ElMessage.error(message || '请求失败')
      return Promise.reject(new Error(message))
    }
  },
  (error) => {
    ElMessage.error(error.message || '网络错误')
    return Promise.reject(error)
  }
)

export default service
```

### 5. 路由配置

#### 5.1 路由结构
```typescript
import type { RouteRecordRaw } from 'vue-router'

const routes: RouteRecordRaw[] = [
  {
    path: '/login',
    name: 'Login',
    component: () => import('@/views/login/index.vue'),
    meta: {
      title: '登录',
      requiresAuth: false
    }
  },
  {
    path: '/',
    component: () => import('@/layout/index.vue'),
    redirect: '/dashboard',
    children: [
      {
        path: 'dashboard',
        name: 'Dashboard',
        component: () => import('@/views/dashboard/index.vue'),
        meta: {
          title: '仪表盘',
          icon: 'dashboard',
          requiresAuth: true
        }
      }
    ]
  }
]
```

#### 5.2 路由守卫
```typescript
import { createRouter, createWebHistory } from 'vue-router'
import { useUserStore } from '@/stores/user'
import { ElMessage } from 'element-plus'

const router = createRouter({
  history: createWebHistory(),
  routes
})

router.beforeEach(async (to, from, next) => {
  const userStore = useUserStore()
  
  // 检查是否需要认证
  if (to.meta.requiresAuth && !userStore.isLoggedIn) {
    ElMessage.warning('请先登录')
    next('/login')
    return
  }
  
  // 检查权限
  if (to.meta.roles && !to.meta.roles.some(role => userStore.roles.includes(role))) {
    ElMessage.error('权限不足')
    next('/403')
    return
  }
  
  next()
})
```

### 6. 样式规范

#### 6.1 SCSS 变量
```scss
// variables.module.scss
$sidebarTextColor: #bfcbd9;
$sidebarActiveTextColor: #409eff;
$sidebarBg: #304156;
$sidebarHover: #263445;
$sidebarWidth: 210px;

:export {
  sidebarTextColor: $sidebarTextColor;
  sidebarActiveTextColor: $sidebarActiveTextColor;
  sidebarBg: $sidebarBg;
  sidebarHover: $sidebarHover;
  sidebarWidth: $sidebarWidth;
}
```

#### 6.2 组件样式
```scss
// 使用 scoped 避免样式污染
<style lang="scss" scoped>
.login-container {
  min-height: 100vh;
  width: 100%;
  background-color: #2d3a4b;
  overflow: hidden;
  
  .login-form {
    position: relative;
    width: 520px;
    max-width: 100%;
    padding: 160px 35px 0;
    margin: 0 auto;
    overflow: hidden;
  }
}

// 深度选择器修改第三方组件样式
:deep(.el-input__inner) {
  background: transparent;
  border: 0;
  color: #fff;
}
</style>
```

### 7. 工具函数

#### 7.1 验证工具
```typescript
// utils/validate.ts
export const isExternal = (path: string): boolean => {
  return /^(https?:|mailto:|tel:)/.test(path)
}

export const validUsername = (str: string): boolean => {
  const validMap = ['admin', 'editor']
  return validMap.indexOf(str.trim()) >= 0
}

export const validURL = (url: string): boolean => {
  const reg = /^(https?|ftp):\/\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9])|([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\/($|[a-zA-Z0-9.,?'\\+&%$#=~_-]+))*$/
  return reg.test(url)
}

export const validEmail = (email: string): boolean => {
  const reg = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/
  return reg.test(email)
}
```

### 8. 权限控制

#### 8.1 权限指令
```typescript
// directives/permission.ts
import type { Directive } from 'vue'
import { useUserStore } from '@/stores/user'

export const permission: Directive = {
  mounted(el, binding) {
    const { value } = binding
    const userStore = useUserStore()
    
    if (value && value instanceof Array && value.length > 0) {
      const permissionRoles = value
      const hasPermission = userStore.roles.some(role => {
        return permissionRoles.includes(role)
      })
      
      if (!hasPermission) {
        el.parentNode && el.parentNode.removeChild(el)
      }
    } else {
      throw new Error('权限指令需要传入角色数组')
    }
  }
}
```

#### 8.2 权限函数
```typescript
// utils/permission.ts
import { useUserStore } from '@/stores/user'

export function checkPermission(value: string[]): boolean {
  if (value && value instanceof Array && value.length > 0) {
    const userStore = useUserStore()
    const permissionRoles = value
    
    return userStore.roles.some(role => {
      return permissionRoles.includes(role)
    })
  } else {
    console.error('权限检查需要传入角色数组')
    return false
  }
}
```

### 9. 环境配置

#### 9.1 环境变量
```bash
# .env.development
VITE_API_BASE_URL = 'http://localhost:8000/api'
VITE_APP_TITLE = '后台管理系统'

# .env.production
VITE_API_BASE_URL = 'https://api.example.com'
VITE_APP_TITLE = '后台管理系统'
```

#### 9.2 Vite 配置
```typescript
// vite.config.ts
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import { resolve } from 'path'

export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      '@': resolve(__dirname, 'src')
    }
  },
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, '')
      }
    }
  }
})
```

### 10. 最佳实践

1. **组件拆分**: 保持组件单一职责，复杂组件拆分为多个子组件
2. **类型安全**: 充分利用 TypeScript 的类型检查，避免运行时错误
3. **性能优化**: 使用 `v-memo`、`shallowRef` 等优化性能
4. **错误处理**: 统一错误处理机制，提供友好的错误提示
5. **代码复用**: 提取公共逻辑为 composables
6. **测试**: 编写单元测试和集成测试
7. **文档**: 为复杂组件和工具函数编写文档注释
